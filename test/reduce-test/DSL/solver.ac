hostdefine STENCIL_ORDER (6)
Field FIELD
output real AC_min_val

#define DER1_3 (1. / 60.)
#define DER1_2 (-3. / 20.)
#define DER1_1 (3. / 4.)
#include "../../../acc-runtime/stdlib/profiles.h"

Stencil derx {
    [0][0][-3] = -AC_inv_ds.x * DER1_3,
    [0][0][-2] = -AC_inv_ds.x * DER1_2,
    [0][0][-1] = -AC_inv_ds.x * DER1_1,
    [0][0][1]  = AC_inv_ds.x * DER1_1,
    [0][0][2]  = AC_inv_ds.x * DER1_2,
    [0][0][3]  = AC_inv_ds.x * DER1_3
}

struct ALL_PROFILES
{
	Profile<X> X
	Profile<Y> Y
	Profile<Z> Z
	Profile<XY> XY
	Profile<XZ> XZ
	Profile<YX> YX
	Profile<YZ> YZ
	Profile<ZX> ZX
	Profile<ZY> ZY
}

ALL_PROFILES PROF

Profile<XY> DX_PROF_XY



Field FIELD_2


output real AC_max_val
output real AC_sum_val
output float AC_float_sum_val
output int  AC_int_sum_val

//TP: there was a bug where reductions worked only if you had a single kernel.
//This is a regression test against it
Kernel empty()
{}

VecZProfile VEC_Z_PROFILE

Kernel test_reduce()
{
    reduce_min(FIELD, AC_min_val)
    reduce_max(FIELD, AC_max_val)
    reduce_sum(FIELD, AC_sum_val)
    reduce_sum((int)value(FIELD),AC_int_sum_val)
    reduce_sum((float)value(FIELD),AC_float_sum_val)

    reduce_sum(FIELD,PROF_X)
    reduce_sum(FIELD,PROF_Y)
    reduce_sum(FIELD,PROF_Z)

    reduce_sum(FIELD,PROF_XZ)
    reduce_sum(FIELD,PROF_XY)

    reduce_sum(FIELD,PROF_YX)
    reduce_sum(FIELD,PROF_YZ)

    reduce_sum(FIELD,PROF_ZX)
    reduce_sum(FIELD,PROF_ZY)

    reduce_sum(derx(FIELD),DX_PROF_XY)

    vec = real3(1.0,2.0,3.0)
    reduce_sum(vec,VEC_Z_PROFILE)
}

Kernel remove_means()
{
	res = value(FIELD)
	res -= PROF_X[vertexIdx.x]
	res -= PROF_Y
	res -= PROF_Z
	res -= PROF_XY[vertexIdx.x][vertexIdx.y]
	res -= PROF_XZ
	res -= PROF_YX
	res -= PROF_YZ
	res -= PROF_ZX
	res -= PROF_ZY
	write(FIELD, res)
	write(FIELD_2,VEC_Z_PROFILE.x + VEC_Z_PROFILE.y + VEC_Z_PROFILE.z)
}
Kernel derx_kernel()
{
	write(FIELD,derx(FIELD))
}
BoundConds bcs
{
	periodic(BOUNDARY_XYZ)
}

ComputeSteps rhs(bcs)
{
	test_reduce()
	remove_means()
	//derx_kernel()
}

