auxiliary Field3 FIELD
hostdefine STENCIL_ORDER (0)

const int test_arr_size = 6;
gmem int AC_global_arr[AC_nlocal.x]
dconst real AC_test_arr[test_arr_size];
dconst real AC_test_arr_2[(2-1)*2+1];
dconst int AC_test_int_arr[test_arr_size/2];


const int AC_nx_const = 2*9
const int AC_ny_const = 2*11

const int3 AC_nlocal_const = {AC_nx_const,AC_ny_const,2}

//gmem real AC_2d_reals[AC_nlocal.x][AC_nlocal.y]
//TP: testing gmem arrays with const dims
//If constant dimensions we can skip a pointer indirection when using the gmem arr
gmem real AC_2d_reals[AC_nx_const][AC_nlocal_const.y]
gmem real AC_2d_reals_dims_from_config[AC_nlocal.x][AC_nlocal.y]

gmem real AC_3d_reals[AC_mlocal.x][AC_mlocal.y][AC_mlocal.z]
gmem float AC_float_arr[AC_nlocal.x]
gmem float AC_4d_float_arr_out[AC_mlocal.x][AC_mlocal.y][AC_mlocal.z][3]
gmem float AC_4d_float_arr[AC_mlocal.x][AC_mlocal.y][AC_mlocal.z][3]

dconst int AC_dconst_int

Kernel update()
{
	write(FIELD_X,AC_test_int_arr[0]*(AC_test_arr[0] + AC_test_arr[3] + AC_test_arr_2[0])*AC_global_arr[vertexIdx.x-NGHOST]);
	write(FIELD_Y,AC_test_int_arr[1]*(AC_test_arr[1] + AC_test_arr[4] + AC_test_arr_2[1] + AC_2d_reals[AC_dconst_int][vertexIdx.y - NGHOST] + AC_3d_reals[vertexIdx.x][vertexIdx.y][vertexIdx.z]));
	write(FIELD_Z,AC_test_int_arr[2]*(AC_test_arr[2] + AC_test_arr[5] + AC_test_arr_2[2])*(real(AC_4d_float_arr[vertexIdx.x][vertexIdx.y][vertexIdx.z][0]) + real(AC_4d_float_arr[vertexIdx.x][vertexIdx.y][vertexIdx.z][1]) + real(AC_4d_float_arr[vertexIdx.x][vertexIdx.y][vertexIdx.z][2])));
	AC_4d_float_arr_out[vertexIdx.x][vertexIdx.y][vertexIdx.z][0] = float(AC_test_arr[1]*real(AC_4d_float_arr_out[vertexIdx.x][vertexIdx.y][vertexIdx.z][0]));
}
