## Options
option(BUILD_ACC_RUNTIME_LIBRARY "Builds the standalone acc runtime library" OFF)
option(RUNTIME_COMPILATION "Compile version of Astaroth compiled at runtime" OFF)
option(READ_OVERRIDES "Whether to read overrides generated by acc runtime compiler" OFF)

if(RUNTIME_COMPILATION)
	set(RUNTIME_COMPILATION_VAL 1)
else()
	set(RUNTIME_COMPILATION_VAL 0)
endif()

if(READ_OVERRIDES)
	set(READ_OVERRIDES_VAL 1)
else()
	set(READ_OVERRIDES_VAL 0)
endif()

## DSL module dir

# NOTE: Manually defined DSL_MODULE_DIR must be set relative to the project root, not the actual
# build directory!
# NO! ../acc/mhd_solver
# YES! acc/mhd_solver
#


set(DSL_MODULE $ENV{DSL_MODULE})
if (DEFINED DSL_MODULE)
    set(DSL_MODULE_DIR ${PROJECT_SOURCE_DIR}/${DSL_MODULE})
endif ()

set(EXT_SOURCES $ENV{EXT_SOURCES})

if (NOT DEFINED DSL_MODULE_DIR)
    set(DSL_MODULE_DIR ${PROJECT_SOURCE_DIR}/samples/mhd_modular) # Default
else()
    get_filename_component(resolved_module_dir "${DSL_MODULE_DIR}" REALPATH
                           BASE_DIR ${CMAKE_BINARY_DIR})
    set(DSL_MODULE_DIR ${resolved_module_dir})
endif()

set(ACC_COMPILER_PATH $ENV{ACC_COMPILER_PATH})
if(DEFINED ACC_COMPILER_PATH)
	set(ACC_COMPILER ${ACC_COMPILER_PATH})
else()
	set(ACC_COMPILER ${PROJECT_BINARY_DIR}/acc/acc)
endif()


## Generate acc-runtime-headers
set(DSL_SOURCES "${DSL_MODULE_DIR}/*"
                "${PROJECT_SOURCE_DIR}/acc/stencilgen.c"
                "${PROJECT_SOURCE_DIR}/../src/core/stencil_accesses.cpp"
		"${PROJECT_SOURCE_DIR}/${EXT_SOURCES}")

set(DSL_HEADERS "user_kernels.h"
                "user_defines.h"
                "user_declarations.h"
                "stencil_accesses.h"
                "user_taskgraphs.h"
                "user_loaders.h"
                "stencilgen.h"
		"coeffs.h"
		)

set(DSL_MODULE_FILE $ENV{DSL_MODULE_FILE})
if (NOT DEFINED DSL_MODULE_FILE)
	set(ACC_COMPILER_ARGS "${DSL_MODULE_DIR}/*.ac" "${READ_OVERRIDES_VAL}" "${RUNTIME_COMPILATION_VAL}")
else()
	set(ACC_COMPILER_ARGS "${DSL_MODULE_DIR}/*.ac " "${DSL_MODULE_FILE}" "${READ_OVERRIDES_VAL}" "${RUNTIME_COMPILATION_VAL}")
endif()
  add_custom_command (
      COMMENT "Building ACC objects: ${DSL_MODULE_DIR}"
      COMMAND  "${ACC_COMPILER}" ${ACC_COMPILER_ARGS}
      DEPENDS ${DSL_SOURCES} acc
      OUTPUT ${DSL_HEADERS}
  )
add_library(acc-runtime-headers INTERFACE ${DSL_HEADERS})
target_include_directories(acc-runtime-headers INTERFACE . .. ${CMAKE_CURRENT_BINARY_DIR})
target_compile_options(acc-runtime-headers INTERFACE -DIMPLEMENTATION=${IMPLEMENTATION})
target_compile_options(acc-runtime-headers INTERFACE -DMAX_THREADS_PER_BLOCK=${MAX_THREADS_PER_BLOCK})

if (USE_HIP)
    target_link_libraries(acc-runtime-headers INTERFACE ${ROCTRACER})
    target_link_libraries(acc-runtime-headers INTERFACE ${HIPRAND})
    set_property(TARGET acc-runtime-headers PROPERTY HIP_ARCHITECTURES ${CMAKE_HIP_ARCHITECTURES})
else()
    set_property(TARGET acc-runtime-headers PROPERTY CUDA_ARCHITECTURES ${CMAKE_CUDA_ARCHITECTURES})
endif()

message("project source dir ${PROJECT_SOURCE_DIR}")

## Build the runtime library
if (BUILD_ACC_RUNTIME_LIBRARY)
    add_library(acc-runtime STATIC acc_runtime.cu ${CMAKE_CURRENT_SOURCE_DIR}/../../src/core/buffer.cc)
    target_include_directories(acc-runtime PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/..)
    target_include_directories(acc-runtime PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/../../include)
    target_link_libraries(acc-runtime acc-runtime-headers)

    if (USE_HIP)
        set_source_files_properties(acc_runtime.cu PROPERTIES LANGUAGE HIP)
        set_property(TARGET acc-runtime PROPERTY HIP_ARCHITECTURES ${CMAKE_HIP_ARCHITECTURES})
    else()
        set_property(TARGET acc-runtime PROPERTY CUDA_ARCHITECTURES ${CMAKE_CUDA_ARCHITECTURES})
    endif()

endif()
